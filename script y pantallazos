create database BD_TechNova;
use BD_TechNova;


CREATE TABLE Departamento (
id_departamento INT AUTO_INCREMENT PRIMARY KEY,
nombre VARCHAR(100) NOT NULL,
presupuesto DECIMAL(12,2) CHECK (presupuesto > 0)
);

CREATE TABLE Empleado (
id_empleado INT AUTO_INCREMENT PRIMARY KEY,
nombre VARCHAR(100),
cargo VARCHAR(50),
salario DECIMAL(10,2) CHECK (salario > 0),
id_departamento INT,
fecha_ingreso DATE,
FOREIGN KEY (id_departamento) REFERENCES Departamento(id_departamento)
);


CREATE TABLE Proyecto (
id_proyecto INT AUTO_INCREMENT PRIMARY KEY,
nombre VARCHAR(100),
fecha_inicio DATE,
presupuesto DECIMAL(14,2),
id_departamento INT,
FOREIGN KEY (id_departamento) REFERENCES Departamento(id_departamento)
);


CREATE TABLE Asignacion (
id_asignacion INT AUTO_INCREMENT PRIMARY KEY,
id_empleado INT,
id_proyecto INT,
horas_trabajadas INT CHECK (horas_trabajadas >= 0),
FOREIGN KEY (id_empleado) REFERENCES Empleado(id_empleado),
FOREIGN KEY (id_proyecto) REFERENCES Proyecto(id_proyecto)
);


create table HistorialCambios (
  id_historial int auto_increment primary key,
  id_empleado int,
  id_departamento int,
  salario_ant decimal(12,2),
  salario_nuevo decimal(12,2),
  fecha_cambio datetime default current_timestamp,
  motivo varchar(250),
  foreign key(id_empleado) references Empleado(id_empleado)
);

alter table HistorialCambios
add motivo varchar(250);

insert into Departamento (nombre, presupuesto) values
  ('Desarrollo', 15000000.00),
  ('Soporte', 8000000.00),
  ('Investigacion', 12000000.00);
  
insert into Empleado (nombre, cargo, salario, id_departamento, fecha_ingreso) values
  ('Angel Amaya', 'Dev Senior', 4500000.00, 1, '2022-03-01'),
  ('Felipe Poveda', 'Dev Junior', 2200000.00, 1, '2023-01-15'),
  ('Tomas Ruiz', 'Soporte', 1800000.00, 2, '2021-08-20'),
  ('Sebastian Mora', 'Investigador', 3600000.00, 3, '2020-09-10'),
  ('Jaime Gamba', 'Dev', 2500000.00, 1, '2024-02-05');
  
  
insert into Proyecto (nombre, fecha_inicio, presupuesto, id_departamento) values
  ('Proyecto 1', '2024-01-01', 5000000.00, 1),
  ('Proyecto 2', '2023-05-01', 2000000.00, 2),
  ('Proyecto 3', '2024-07-01', 3000000.00, 3);
  

insert into Asignacion (id_empleado, id_proyecto, horas_trabajadas) values
  (1, 1, 120),
  (2, 1, 90),
  (3, 2, 60),
  (4, 3, 150),
  (5, 1, 30);
  
  
  /*funcion*/
  
DELIMITER $$
create function TotalSalarios(p_dep_id int)
returns decimal(18,2)
deterministic
begin
    declare v_total decimal(18,2);

    select sum(salario)
    into v_total
    from Empleado
    where id_departamento = p_dep_id;

    if v_total is null then
        set v_total = 0;
    end if;

    return v_total;
end$$
DELIMITER ;


/*trigger*/

DELIMITER $$
create trigger trg_historial_salario
after update on Empleado
for each row
begin
  if old.salario != new.salario then
    insert into HistorialCambios (id_empleado, id_departamento, salario_ant, salario_nuevo, motivo)
    values (new.id_empleado, new.id_departamento, old.salario, new.salario, 'Incremento por AumentarSalario');
  end if;
end$$
DELIMITER ;

/*procedimiento*/
DELIMITER $$
create procedure AumentarSalario(
  in p_dep_id int,
  in p_porcentaje decimal(5,2)
)
begin
  declare v_pres decimal(18,2);
  declare v_total_before decimal(18,2);
  declare v_total_after decimal(18,2);
  declare v_incremento decimal(18,2);


  start transaction;

  select presupuesto into v_pres
    from departamento
   where id_departamento = p_dep_id
   for update;

  if v_pres is null then
    rollback;
    signal sqlstate '45000' set message_text = 'Departamento no existe';
  else
    if v_pres > 10000000.00 then

      select sum(salario) into v_total_before from empleado where id_departamento = p_dep_id;
      if v_total_before is null then
        set v_total_before = 0;
      end if;

      update empleado
         set salario = round(salario * (1 + p_porcentaje/100), 2)
       where id_departamento = p_dep_id;

      select sum(salario) into v_total_after from empleado where id_departamento = p_dep_id;
      if v_total_after is null then
        set v_total_after = 0;
      end if;

      set v_incremento = v_total_after - v_total_before;

      update departamento
         set presupuesto = presupuesto - v_incremento
       where id_departamento = p_dep_id;

      select presupuesto into v_pres from departamento where id_departamento = p_dep_id;
      if v_pres < 0 then
        rollback;
        signal sqlstate '45000' set message_text = 'Ajuste produce presupuesto negativo. Operacion revertida.';
      else
        commit;
      end if;

    else
      rollback;
      signal sqlstate '45000' set message_text = 'Presupuesto del departamento no supera 10.000.000. No se aplica aumento.';
    end if;
  end if;
end$$
delimiter ;


#estado inicial
select id_departamento, nombre, presupuesto from departamento order by id_departamento;
select id_empleado, nombre, cargo, salario, id_departamento, fecha_ingreso from empleado order by id_empleado;

#totales de salarios por departamento
select d.id_departamento, d.nombre,
  (select if(sum(e.salario) is null, 0, sum(e.salario)) from empleado e where e.id_departamento = d.id_departamento) as total_salarios
from departamento d order by d.id_departamento;

#procedimiento ejemplo (aumenta 10% al departamento 1)
call aumentar_salario(1, 10);

#estado posterior al aumento
select id_empleado, nombre, salario, id_departamento from empleado where id_departamento = 1 order by id_empleado;
select id_departamento, nombre, presupuesto from departamento where id_departamento = 1;
select id_historial, id_empleado, id_departamento, salario_ant, salario_nuevo, fecha_cambio, motivo
from historialcambios order by fecha_cambio desc;

#prueba forzada de rollback
insert into departamento (nombre, presupuesto) values ('depprueba', 100000.00);
set @dep_temp = last_insert_id();
insert into empleado (nombre, cargo, salario, id_departamento, fecha_ingreso)
values ('Test A','temp',90000.00,@dep_temp,'2023-01-01'),
       ('Test B','temp',90000.00,@dep_temp,'2023-01-02');

call aumentar_salario(@dep_temp, 10);

#verificaciones finales
select * from departamento;
select * from empleado;
select * from historialcambios order by fecha_cambio desc;
